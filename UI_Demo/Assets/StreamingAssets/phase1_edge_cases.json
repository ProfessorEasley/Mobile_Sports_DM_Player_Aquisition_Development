{
  "schema_version": "ccas.p1.v1",
  "phase_1_hooks": {
    "description": "Phase 1 simplified hook system with 2 emotions and 2 active hooks (offline, single-player)",
    "tracked_emotions": ["frustration", "satisfaction"],
    "active_hooks": ["outcome_streak", "progress_drought"],
    "reserved_for_future": ["social_comparison"],
    
    "global_configuration": {
      "escalation_factor": 1.2,
      "soft_cap_percentage": 0.85,
      "rare_multiplier_cap": 1.20,
      "quiet_window_seconds": [6, 8],
      "session_persistence_only": true
    },
    
    "outcome_streak_hook": {
      "hook_id": "d7a8f9e2-3b4c-5d6e-7f8a-9b0c1d2e3f4a",
      "name": "Outcome Streak",
      "description": "Triggers on consecutive similar pack outcomes",
      "trigger_events": ["pack_pull_result"],
      "evaluation_rules": {
        "minimum_streak": 2,
        "streak_tiers": {
          "short": {
            "range": [2, 3],
            "description": "Initial frustration or satisfaction"
          },
          "medium": {
            "range": [4, 6],
            "description": "Building emotional response"
          },
          "long": {
            "range": [7, 999],
            "description": "Peak emotional state"
          }
        }
      },
      "emotional_formulas": {
        "common_streak": {
          "condition": "rarity == 'common' AND streak >= 2",
          "base_delta": {
            "frustration": 5.0
          },
          "calculation": "delta = 5.0 * pow(1.2, streak_len - 1)",
          "rare_boost": false,
          "streak_counter": "fail_streak",
          "resets_counter": "success_streak"
        },
        "rare_plus_pull": {
          "condition": "rarity IN ['rare', 'epic', 'legendary']",
          "base_delta": {
            "satisfaction": 2.0,
            "frustration": -3.0
          },
          "calculation_satisfaction": "delta = 2.0 * pow(1.2, streak_len - 1)",
          "calculation_frustration": "delta = -3.0 * pow(1.2, streak_len - 1)",
          "rare_boost": true,
          "rare_boost_applies_to": "satisfaction_only",
          "rare_boost_formula": "final_satisfaction = min(computed_delta * 1.20, computed_delta + (0.20 * abs(computed_delta)))",
          "streak_counter": "success_streak",
          "resets_counter": "fail_streak",
          "note": "Frustration reduction does NOT receive rare boost, only satisfaction increase does"
        }
      },
      "implementation_notes": [
        "Track separate success and fail streaks",
        "Reset opposing streak on trigger",
        "Rare boost (+20%) ONLY applies to satisfaction delta, not frustration reduction",
        "Apply soft cap after all calculations",
        "Respect global quiet window (6-8s)"
      ]
    },
    
    "progress_drought_hook": {
      "hook_id": "e8b9f0a3-4c5d-6e7f-8a9b-0c1d2e3f4a5b",
      "name": "Progress Drought",
      "description": "Triggers on lack of progression or idle time",
      "trigger_events": ["tick_event", "idle_detection"],
      "evaluation_rules": {
        "time_since_progress_threshold": 60,
        "session_idle_threshold": 600,
        "evaluation_cadence_seconds": 10
      },
      "emotional_formulas": {
        "drought_frustration": {
          "condition": "time_since_progress >= 60 OR session_idle >= 600",
          "base_delta": {
            "frustration": 3.0
          },
          "calculation": "delta = 3.0 * pow(1.2, drought_counter - 1)",
          "increment_counter": true,
          "counter_name": "drought_counter",
          "reset_on": "any progress event (rare+ pull, level up, achievement, etc.)"
        }
      },
      "implementation_notes": [
        "Fires once every 10 seconds while condition holds",
        "Increment drought_counter each fire",
        "Reset drought_counter when condition clears (progress resumes)",
        "Apply soft cap to prevent runaway values"
      ]
    },
    
    "social_comparison_hook_future": {
      "hook_id": "f9c0a1b4-5d6e-7f8a-9b0c-1d2e3f4a5b6c",
      "name": "Social Comparison (RESERVED)",
      "status": "disabled_until_leaderboard",
      "description": "Will trigger on leaderboard or social exposure in Phase 2+",
      "trigger_events": ["leaderboard_view", "shared_pull_view", "social_update"],
      "evaluation_rules": {
        "refresh_rate_seconds": 15,
        "mutual_exclusion": true,
        "comparison_threshold": 0.1
      },
      "emotional_formulas": {
        "behind_peers": {
          "condition": "peer_delta == 'behind'",
          "base_delta": {
            "envy": 1.5
          },
          "calculation": "delta = 1.5 * pow(1.2, social_streak - 1)",
          "increment_social_streak": true,
          "counter_name": "social_streak",
          "note": "ENVY emotion to be added in Phase 2"
        },
        "ahead_peers": {
          "condition": "peer_delta == 'ahead' AND significant_lead",
          "base_delta": {
            "satisfaction": 1.0
          },
          "calculation": "delta = 1.0 * pow(1.2, social_streak - 1)",
          "increment_social_streak": true,
          "counter_name": "social_streak"
        }
      },
      "implementation_notes": [
        "PHASE 2+ ONLY - Do not implement until leaderboard exists",
        "Never apply both envy and satisfaction in same check",
        "Pick dominant condition based on peer comparison",
        "Evaluate on leaderboard refresh or every 15s during exposure",
        "Honor cooldowns and quiet window",
        "Will require adding social_streak counter to state"
      ]
    }
  },
  
  "phase_1_decay_system": {
    "description": "Simple event-conditioned decay for Phase 1 (2 emotions only, offline)",
    "decay_rules": {
      "frustration": {
        "decay_amount": -1.5,
        "trigger_events": ["xp_multiplier_activated", "dupe_conversion_bonus"],
        "application": "immediate",
        "note": "Fires when XP multiplier or dupe-conversion bonus triggers"
      },
      "satisfaction": {
        "decay_amount": -2.0,
        "trigger_condition": "no_rare_plus_for_2_sessions",
        "application": "session_boundary",
        "note": "Check if player has gone 2 consecutive sessions without Rare+ (epic/legendary/rare)"
      }
    },
    "future_decay_rules": {
      "envy": {
        "decay_amount": -1.0,
        "trigger_condition": "no_leaderboard_exposure_for_2_sessions",
        "application": "session_boundary",
        "status": "reserved_for_phase_2"
      }
    }
  },
  
  "phase_1_event_payloads": {
    "outcome_event": {
      "type": "outcome",
      "event_id": "uuid-string",
      "timestamp": "ISO-8601-string",
      "player_id": "uuid-string",
      "session_id": "uuid-string",
      "rarity": "enum:[common|uncommon|rare|epic|legendary]",
      "pack_type": "string (optional)"
    },
    "tick_event": {
      "type": "tick",
      "event_id": "uuid-string",
      "timestamp": "ISO-8601-string",
      "player_id": "uuid-string",
      "session_id": "uuid-string",
      "time_since_progress_seconds": "integer",
      "idle_seconds": "integer"
    },
    "meta_event": {
      "type": "meta",
      "event_id": "uuid-string",
      "timestamp": "ISO-8601-string",
      "player_id": "uuid-string",
      "session_id": "uuid-string",
      "xp_multiplier_fired": "boolean",
      "dupe_conversion_bonus": "boolean",
      "session_has_rare_plus": "boolean"
    }
  },
  
  "phase_1_event_payloads_future": {
    "social_update_event": {
      "type": "social_update",
      "event_id": "uuid-string",
      "timestamp": "ISO-8601-string",
      "player_id": "uuid-string",
      "session_id": "uuid-string",
      "exposed": "boolean",
      "peer_delta": "enum:[behind|ahead|equal]",
      "leaderboard_position": "integer",
      "peer_average_position": "float",
      "status": "reserved_for_phase_2"
    }
  },
  
  "phase_1_update_pipeline": {
    "execution_order": [
      {
        "step": 1,
        "action": "apply_decay",
        "description": "Check and apply any eligible decay (frustration, satisfaction only)"
      },
      {
        "step": 2,
        "action": "evaluate_hooks",
        "description": "Check hook trigger conditions (outcome_streak, progress_drought)"
      },
      {
        "step": 3,
        "action": "calculate_deltas",
        "description": "Compute deltas using streak formulas: delta = base * EF^(streak-1)"
      },
      {
        "step": 4,
        "action": "apply_rare_boost",
        "description": "If Rare+ event, apply up to +20% boost ONLY to satisfaction delta (not frustration)"
      },
      {
        "step": 5,
        "action": "sum_deltas",
        "description": "Sum all deltas by emotion type"
      },
      {
        "step": 6,
        "action": "apply_soft_cap",
        "description": "Limit single update to ~85% of target peak (8.5 max for emotions bounded at 10)"
      },
      {
        "step": 7,
        "action": "clamp_values",
        "description": "Ensure emotions stay within [0, 10] bounds"
      },
      {
        "step": 8,
        "action": "enforce_quiet_window",
        "description": "Start 6-8 second global quiet period after any hook fires"
      }
    ]
  },
  
  "phase_1_guardrails": {
    "emotion_bounds": {
      "min": 0.0,
      "max": 10.0
    },
    "single_update_soft_cap": {
      "formula": "max_delta = target_peak * 0.85",
      "example": "For target peak of 10, max single update is 8.5",
      "application": "Applied per emotion per update, prevents instant max spikes"
    },
    "rare_boost_limit": {
      "max_multiplier": 1.20,
      "description": "Rare+ events get at most +20% boost to computed satisfaction delta",
      "applies_to": "satisfaction increase ONLY, NOT frustration reduction"
    },
    "streak_escalation": {
      "formula": "EF^(streak_len - 1) where EF = 1.2",
      "examples": [
        "Streak 2: 1.2^1 = 1.2x",
        "Streak 3: 1.2^2 = 1.44x",
        "Streak 4: 1.2^3 = 1.728x",
        "Streak 5: 1.2^4 = 2.074x",
        "Streak 7: 1.2^6 = 2.986x"
      ]
    },
    "cooldown_management": {
      "global_quiet_window": "6-8 seconds after any hook fires",
      "hook_specific_cooldowns": "None in Phase 1",
      "mutex_groups": "None in Phase 1"
    }
  },
  
  "calculation_examples": {
    "common_streak_example": {
      "scenario": "3 consecutive common pulls (fail_streak = 3)",
      "calculation": "5.0 * 1.2^(3-1) = 5.0 * 1.44 = 7.2",
      "result": {
        "frustration": "+7.2",
        "satisfaction": "0.0"
      },
      "soft_cap_check": "Per-update push ≤ ~85% of target"
    },
    "rare_pull_example": {
      "scenario": "First rare pull after commons (success_streak = 1)",
      "calculation_satisfaction": "2.0 * 1.2^(1-1) = 2.0 * 1.0 = 2.0, with rare boost: 2.0 * 1.20 = 2.4",
      "calculation_frustration": "-3.0 * 1.2^(1-1) = -3.0 * 1.0 = -3.0 (NO rare boost)",
      "result": {
        "frustration": "-3.0",
        "satisfaction": "+2.4"
      },
      "note": "Rare boost applies ONLY to satisfaction, not frustration reduction"
    },
    "epic_legendary_example": {
      "scenario": "Epic or Legendary pull (success_streak = 1)",
      "calculation": "Same as rare_pull_example",
      "result": {
        "frustration": "-3.0",
        "satisfaction": "+2.4"
      },
      "note": "Epic and Legendary use same formula as Rare in Phase 1"
    },
    "drought_example": {
      "scenario": "Second drought tick (drought_counter = 2)",
      "calculation": "3.0 * 1.2^(2-1) = 3.0 * 1.2 = 3.6",
      "result": {
        "frustration": "+3.6",
        "satisfaction": "0.0"
      },
      "cadence": "Fires every 10 seconds while drought condition holds"
    }
  },
  
  "acceptance_tests": {
    "test_common_streak": {
      "input": "3 commons in a row",
      "expected_output": "frustration += 5 × 1.2^2 = 7.2",
      "constraint": "Per-update push ≤ ~85% of target"
    },
    "test_epic_legendary": {
      "input": "Epic or Legendary pull",
      "expected_satisfaction": "satisfaction += 2 × 1.2^(streak-1); Rare+ extra ≤ +20% before clamp",
      "expected_frustration": "frustration -= 3 × 1.2^(streak-1); NO rare boost"
    },
    "test_drought_active": {
      "input": "Drought active (no progress ≥60s)",
      "expected_output": "Every 10s: frustration += 3 × 1.2^(drought_counter-1)",
      "reset_condition": "Resets when progress resumes"
    },
    "test_frustration_decay": {
      "input": "XP multiplier or dupe-conversion bonus fires",
      "expected_output": "frustration -= 1.5"
    },
    "test_satisfaction_decay": {
      "input": "Two sessions in a row have no Rare+",
      "expected_output": "satisfaction -= 2.0"
    },
    "test_session_reset": {
      "input": "New session starts",
      "expected_output": "All emotions and streaks reset to 0"
    },
    "test_quiet_window": {
      "input": "Hook fires",
      "expected_output": "6-8s global quiet window prevents multiple hook firings"
    }
  },
  
  "phase_2_integration_notes": {
    "envy_emotion": "Add envy to tracked_emotions array when leaderboard is implemented",
    "social_comparison_hook": "Move from phase_1_hooks_future to active hooks",
    "social_streak_counter": "Add social_streak to streaks object in state contract",
    "envy_decay": "Move from future_decay_rules to active decay_rules",
    "social_update_event": "Activate social_update_event payload",
    "acquisition_loop_documentation": "Document how envy affects player decisions alongside frustration and satisfaction"
  }
}
